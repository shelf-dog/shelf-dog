{"files":[{"id":"f17889a0-8c8b-4c5d-8379-58fc3cf5209b","name":"Entry","type":"server_js","source":"/**\n * Creates a custom menu in Google Sheets when the spreadsheet opens.\n */\nfunction onInstall(e) {\n  onOpen(e);\n};\n\nfunction onOpen() {\n  var ui \u003d SpreadsheetApp.getUi();\n  \n  ui.createMenu(\"Tasks\")\n      .addItem(\"Authorise\", \"authoriseServer\")\n      .addToUi();\n};\n\nfunction authoriseServer() {\n  ScriptApp.getOAuthToken();\n};"},{"id":"58fe416e-13bb-4acc-b485-f829a25dea2b","name":"appsscript","type":"json","source":"{\n  \"timeZone\": \"Europe/London\",\n  \"dependencies\": {\n    \"enabledAdvancedServices\": [{\n      \"userSymbol\": \"Drive\",\n      \"serviceId\": \"drive\",\n      \"version\": \"v2\"\n    }],\n    \"libraries\": [{\n      \"userSymbol\": \"SAAD\",\n      \"libraryId\": \"1D-FTHDV4Xjk6YIlTuV7dRiNThUZm6s5oeBMqvK-6q8keGsrKjEpzoIjL\",\n      \"version\": \"8\"\n    }, {\n      \"userSymbol\": \"CONFIG\",\n      \"libraryId\": \"1pF0iA0f5Kl_QDPEhG6hXFKSfeQ9uYrzphh1eZegTUyqbMhohOZl8AEzQ\",\n      \"version\": \"7\"\n    }, {\n      \"userSymbol\": \"WEBAPI\",\n      \"libraryId\": \"1IxhmaGfGcOnW2rXMYW4ExFxrk9NzHpHwV_0n-h0R4aZdIcuApBwvzWsk\",\n      \"version\": \"12\"\n    }]\n  },\n  \"webapp\": {\n    \"access\": \"ANYONE_ANONYMOUS\",\n    \"executeAs\": \"USER_DEPLOYING\"\n  },\n  \"exceptionLogging\": \"STACKDRIVER\",\n  \"runtimeVersion\": \"V8\"\n}"},{"id":"a3e0a89b-86fc-4043-83a3-aba6935d58c5","name":"Server","type":"server_js","source":"// -- SERVER FUNCTIONS -- //\nfunction doGet(e){\n  return WEBAPI.handleResponse(e, API(), PUBLIC_KEY);\n}\n\nfunction doPost(e){\n  return WEBAPI.handleResponse(e, API(), PUBLIC_KEY);\n}\n// -- SERVER FUNCTIONS -- //"},{"id":"ec3d06eb-043b-469d-a77b-791947b775c1","name":"API","type":"server_js","source":"var API \u003d () \u003d\u003e {\n  \n  var _claims \u003d (user, claims) \u003d\u003e {\n          var _managers \u003d config.get_managers();\n          if (_managers \u0026\u0026 _managers.length \u003e 0 \u0026\u0026 _managers.indexOf(user) \u003e\u003d 0) claims.manage \u003d true;\n          if (user \u003d\u003d\u003d Session.getActiveUser().getEmail()) claims.owner \u003d true;\n          return claims;\n        };\n        \n  var _sheet \u003d (name, key, value) \u003d\u003e {\n    var _spreadsheet \u003d SpreadsheetApp.getActiveSpreadsheet(),\n        _sheet \u003d _spreadsheet.getSheetByName(name);\n        \n    if (!_sheet) {\n      var _sheets \u003d _spreadsheet.getSheets()\n        .filter(sheet \u003d\u003e {\n          var _metadata \u003d _sheet.getDeveloperMetadata();\n          return _metadata.some(metadata \u003d\u003e {\n            return metadata.getKey() \u003d\u003d key \u0026\u0026 metadata.getValue() \u003d\u003d value;\n          });\n        });\n      if (_sheets \u0026\u0026 _sheets.length \u003d\u003d\u003d 1) _sheet \u003d _sheets[0];\n    }\n    \n    return _sheet;\n  };\n  \n  var _sheets \u003d {\n  \n    current : () \u003d\u003e _sheet(\"CURRENT LOANS\", \"TYPE\", \"CURRENT_LOANS\"),\n    \n    users : () \u003d\u003e _sheet(\"USERS\", \"TYPE\", \"USERS\"),\n  \n  };\n  \n  var _current \u003d () \u003d\u003e {\n    var _data \u003d _sheets.current();\n    return _data ? SAAD.DB().sheet(_data, _data.getParent(), {Range : \"A:G\", Header : 1}).get().query() : [];\n  };\n  \n  var _users \u003d () \u003d\u003e {\n    var _data \u003d _sheets.users();\n    return _data ? SAAD.DB().sheet(_data, _data.getParent(), {Range : \"A:D\", Header : 1}).get().query() : [];\n  };\n  \n  var _available \u003d (params) \u003d\u003e {\n    var _data \u003d _current();\n      \n    return params.copies.split(\",\").map((copy) \u003d\u003e {\n      var _loans \u003d _data.filter((loan) \u003d\u003e {\n        return loan.COPY \u003d\u003d copy \u0026\u0026 (loan.RETURNED \u003d\u003d null || loan.RETURNED \u003d\u003d \"\");\n      });\n      return {\n        copy: copy,\n        available: _loans.length \u003d\u003d\u003d 0 ? true : false\n      };\n    });\n  };\n  \n  var _details \u003d (user) \u003d\u003e {\n    var _display \u003d _users().filter((row) \u003d\u003e row.ID \u0026\u0026 row.ID.toLowerCase \u0026\u0026 row.ID.toLowerCase() \u003d\u003d user);\n    if (_display \u0026\u0026 _display.length \u003d\u003d\u003d 1) {\n      return {\n        display: _display[0].DISPLAY_NAME,\n        search: _display[0].CUSTOM_SEARCHES \u0026\u0026 _display[0].CUSTOM_SEARCHES.split ? \n                  _display[0].CUSTOM_SEARCHES.split(\"\\n\")\n                    .filter((search) \u003d\u003e !!search)\n                    .map((search) \u003d\u003e {\n                      if (/^\\[.+].+$/.test(search \u003d search.trim())) {\n                        var _matched \u003d /^\\[(.+)](.+)$/.exec(search);\n                        return {\n                          name: _matched[1],\n                          search: _matched[2],\n                        };\n                      } else {\n                        return search;\n                      }\n                    }) : null,\n      };\n    }\n  };\n  \n  return {\n  \n    meta : (params, user, claims) \u003d\u003e {\n    \n      return {\n        description: config.get_description(),\n        type: \"BOOKS\",\n        version: 1,\n        capabilities: {\n          loan: config.get_capabilities_loan(),\n          loan_field: config.get_capabilities_loan_field(),\n          loan_length: config.get_capabilities_loan_length(),\n        },\n        contents: {\n          books: {\n            audio: config.get_contents_books_audio(),\n            electronic: config.get_contents_books_electronic(),\n            physical: config.get_contents_books_physical(),\n          }\n        },\n        recent: config.get_recent_items(),\n        actions: {\n          meta: {\n            description : \"Provides information about this API, and it\u0027s capabilities.\"\n          },\n          db: {\n            description : \"Returns the DB Catalog File for the Library.\"\n          },\n          hash: {\n            description : \"Gets the computed binary hash of the DB Catalog File, to allow monitoring for changes.\"\n          },\n          settings: {\n            description : \"Gets / Sets the settings for this library.\",\n            level : \"ADMIN\"\n          },\n          cover: {\n            description : \"Gets the Cover Link (if link param is supplied) or Cover Bytes for an Item.\"\n          },\n          available: {\n            description : \"Gets the Copy Availability\"\n          },\n          loans: {\n            description : \"Gets Loans for User, Copy or Outstanding (Current - needs MANAGER level) depending on params supplied\",\n            level : \"\"\n          },\n          statistics: {\n            description : \"Gets Calculated Statistics for all Loans\",\n            level : \"MANAGER\"\n          },\n          log_loaned: {\n            description : \"Log Copy/Item as Loaned\",\n            level : \"MANAGER\"\n          },\n          log_returned: {\n            description : \"Log Copy/Item as Returned\",\n            level : \"MANAGER\"\n          },\n          users: {\n            description : \"Gets User List (for names and links)\",\n            level : \"MANAGER\"\n          },\n        },\n        user: user,\n        details: _details(user),\n        claims: _claims(user, claims)\n      }\n    },\n    \n    hash : () \u003d\u003e {\n      var _db \u003d config.get_database();\n      return _db ? Drive.Files.get(_db, {\n          supportsAllDrives: true,\n          supportsTeamDrives: true\n        }).md5Checksum : \"\";\n    },\n    \n    db : () \u003d\u003e {\n      var _db \u003d config.get_database();\n      return _db ? {\n        hash : Drive.Files.get(_db, {\n          supportsAllDrives: true,\n          supportsTeamDrives: true\n        }).md5Checksum,\n        data : DriveApp.getFileById(_db).getBlob().getBytes()\n      } : \"\";\n    },\n    \n    settings : (params, user, claims) \u003d\u003e {\n      if (!claims || !claims.admin) return;\n      if (Object.keys(params).length \u003e 0) config.set(params);\n      return config.get();\n    },\n    \n    cover : (params) \u003d\u003e {\n      if (!params || !params.path) return;\n      var _path \u003d params.path.split(\"/\");\n          _folder \u003d config.get_folder();\n          \n      if (!_folder) return;\n      _folder \u003d DriveApp.getFolderById(_folder);\n      _path.forEach((path) \u003d\u003e {\n        if (_folder) {\n          var __folder \u003d _folder.getFoldersByName(path);\n          _folder \u003d __folder.hasNext() ? __folder.next() : null;\n        }\n      });\n      \n      if (!_folder) return;\n      var _cover \u003d _folder.getFilesByName(\"cover.jpg\");\n      \n      if (!_cover.hasNext()) return;\n      _cover \u003d _cover.next();\n      \n      return params.link ? Drive.Files.get(_cover.getId(), {\n          supportsAllDrives: true,\n          supportsTeamDrives: true\n        }).thumbnailLink || _cover.getBlob().getBytes() : _cover.getBlob().getBytes();\n    },\n    \n    available : (params) \u003d\u003e {\n      if (!params || !params.copies) return;\n      return _available(params);\n    },\n    \n    loans : (params, user, claims) \u003d\u003e {\n      var _authorised \u003d claims \u0026\u0026 (claims \u003d _claims(user, claims)).manage;\n      _authorised \u003d _authorised ? _authorised : (params \u0026\u0026 params.user \u0026\u0026 params.user.toLowerCase() \u003d\u003d user.toLowerCase());\n      if (!_authorised) return;\n      \n      var _overdue \u003d params.overdue ? (() \u003d\u003e {\n        var _now \u003d new Date(),\n            _overdue \u003d config.get_capabilities_loan_length();\n        if (_overdue) _overdue \u003d _overdue * 24 * 60 * 60 * 1000;\n        return (loan) \u003d\u003e {\n          if (!_overdue) return false;\n          var _loaned \u003d loan.DATE ? loan.DATE instanceof Date ? loan.DATE : new Date(loan.DATE) : false;\n          return _loaned \u0026\u0026 !loan.RETURNED \u0026\u0026 (_now - _loaned) \u003e _overdue;\n        };\n      })() : null;\n      \n      return _current()\n        .filter((loan) \u003d\u003e params.user ? \n          loan.USER \u0026\u0026 loan.USER.toLowerCase() \u003d\u003d params.user.toLowerCase() : \n            params.copy ? loan.COPY \u003d\u003d params.copy :\n              params.overdue ? _overdue(loan) :\n                (loan.RETURNED \u003d\u003d null || loan.RETURNED \u003d\u003d \"\"))\n        .map((loan) \u003d\u003e {\n          var _return \u003d {\n            id: loan.ID,\n            date: loan.DATE,\n            isbn: loan.ISBN,\n            copy: loan.COPY,\n            user: loan.USER\n          };\n          if (claims \u0026\u0026 claims.manage) {\n            _return.returned \u003d loan.RETURNED;\n            _return.last \u003d loan.AUTH_USER;\n          } else {\n            _return.returned \u003d !!loan.RETURNED;\n          }\n          return _return;\n        });\n    },\n    \n    statistics : (params, user, claims) \u003d\u003e {\n      if (!claims || !(claims \u003d _claims(user, claims)).manage) return;\n      var _week \u003d (value) \u003d\u003e {\n            var d \u003d new Date(Date.UTC(value.getFullYear(), value.getMonth(), value.getDate()));\n            var dayNum \u003d d.getUTCDay() || 7;\n            d.setUTCDate(d.getUTCDate() + 4 - dayNum);\n            var yearStart \u003d new Date(Date.UTC(d.getUTCFullYear(),0,1));\n            return Math.ceil((((d - yearStart) / 86400000) + 1)/7)\n          },\n          _now \u003d new Date(),\n          _overdue \u003d config.get_capabilities_loan_length();\n      if (_overdue) _overdue \u003d _overdue * 24 * 60 * 60 * 1000;\n      var _return \u003d _current().reduce((memo, loan) \u003d\u003e {\n        memo.loaned +\u003d 1;\n        loan.RETURNED ? memo.returned +\u003d 1 : memo.outstanding +\u003d 1;\n        var _loaned \u003d loan.DATE ? loan.DATE instanceof Date ? loan.DATE : new Date(loan.DATE) : false,\n            _returned \u003d loan.RETURNED ? loan.RETURNED instanceof Date ? loan.RETURNED : Date.parse(loan.RETURNED) : false;\n        if (_loaned) {\n          var _key \u003d Utilities.formatString(\"%s-%s\", _loaned.getFullYear(), _week(_loaned));\n          memo.weeks[_key] \u003d memo.weeks[_key] ? memo.weeks[_key] +\u003d 1 : 1; \n        }\n        if (_loaned \u0026\u0026 _returned \u0026\u0026 _returned \u003e _loaned) memo.durations.push(_returned - _loaned);\n        if (_loaned \u0026\u0026 !_returned \u0026\u0026 _overdue \u0026\u0026 (_now - _loaned) \u003e _overdue) memo.overdue +\u003d 1;\n        return memo;\n      }, {\n        loaned : 0,\n        returned : 0,\n        outstanding : 0,\n        overdue : 0,\n        durations: [],\n        weeks : {}\n      });\n      _return.durations \u003d _return.durations.length ? Math.round(_return.durations.reduce((a, b) \u003d\u003e (a + b)) / _return.durations.length / 100 / 60 / 60) / 10 : 0;\n      return _return;\n    },\n    \n    log_loaned : (params, user, claims) \u003d\u003e {\n      if (!claims || !(claims \u003d _claims(user, claims)).manage || !config.get_capabilities_loan()) return;\n      if (!params || !params.user || !params.id) return;\n      \n      _sheets.current().appendRow([\n        new Date().toISOString(),\n        Utilities.formatString(\"\u0027%s\", params.id),\n        params.isbn ? Utilities.formatString(\"\u0027%s\", params.isbn) : \"\",\n        Utilities.formatString(\"\u0027%s\", params.copy || params.id),\n        params.user,\n        \"\",\n        user,\n        \u0027\u003dIF(LEN(INDIRECT(\"R\"\u0026ROW()\u0026\"C6\", FALSE))\u003d0,HYPERLINK(\"https://shelf.dog/app/manage/#google,library.\"\u0026CODE\u0026\".search.\"\u0026INDIRECT(\"R\"\u0026ROW()\u0026\"C4\", FALSE),\"Open\"),)\u0027\n      ]);\n      \n      return _available({\n        copies: params.copy || params.id\n      });\n    },\n    \n    log_returned : (params, user, claims) \u003d\u003e {\n      if (!claims || !(claims \u003d _claims(user, claims)).manage || !config.get_capabilities_loan()) return;\n      if (!params || !params.copy) return;\n      \n      var _loans \u003d _current().filter((loan) \u003d\u003e (loan.RETURNED \u003d\u003d null || loan.RETURNED \u003d\u003d \"\") \u0026\u0026 loan.COPY \u003d\u003d params.copy);\n  \n      if (_loans.length \u003d\u003d 1) {\n        _sheets.current().getRange(_loans[0].$SaaD.row + 1, 6, 1, 2).setValues([[new Date().toISOString(), user]]);\n        return _available({\n          copies: params.copy\n        });\n      }\n    },\n    \n    users : (params, user, claims) \u003d\u003e {\n      if (!claims || !(claims \u003d _claims(user, claims)).manage) return;\n      return _users()\n        .filter((user) \u003d\u003e user.ID)\n        .map((user) \u003d\u003e {\n          return {\n            id: user.ID,\n            name: user.FULL_NAME,\n            display: user.DISPLAY_NAME,\n            link: user.LINK\n          };\n        });\n    },\n    \n  };\n  \n};"},{"id":"5654b6d9-1089-4ced-9865-20ed363671d8","name":"Config","type":"server_js","source":"var config \u003d CONFIG.configure(PropertiesService.getScriptProperties(), {\n  description: {\n    name: \"DESCRIPTION\",\n    initial: \"Library\"\n  },\n  capabilities_loan: {\n    name: \"CAPABILITIES_LOAN\",\n    initial: false\n  },\n  capabilities_loan_field: {\n    name: \"CAPABILITIES_LOAN_FIELD\",\n    initial: \"\"\n  },\n  capabilities_loan_length: {\n    name: \"CAPABILITIES_LOAN_LENGTH\",\n    initial: 0\n  },\n  contents_books_audio: {\n    name: \"CONTENTS_BOOKS_AUDIO\",\n    initial: false\n  },\n  contents_books_electronic: {\n    name: \"CONTENTS_BOOKS_ELECTRONIC\",\n    initial: false\n  },\n  contents_books_physical: {\n    name: \"CONTENTS_BOOKS_PHYSICAL\",\n    initial: false\n  },\n  recent_items: {\n    name: \"RECENT_ITEMS\",\n    initial: 5\n  },\n  folder: {\n    name: \"FOLDER\",\n    initial: \"\"\n  },\n  database: {\n    name: \"DATABASE\",\n    initial: \"\"\n  },\n  managers: {\n    name: \"MANAGERS\",\n    initial: []\n  }\n});"},{"id":"c3f0553b-3394-4ccf-87bb-e421a2e623c9","name":"Crypto","type":"server_js","source":"var PUBLIC_KEY \u003d \"{{{KEY}}}\";"},{"id":"27e400f0-0600-415d-8323-219a045afda0","name":"Versions","type":"server_js","source":"// -- All String Keys have to be quoted for JSON Parsing -- //\nvar VERSIONS \u003d [\n  {\n    \"v1_2_7\" : {\n      \"version\": \"1.2.7\",\n      \"description\": \"User Search Links\"\n    }\n  }, {\n    \"v1_2_0\" : {\n      \"version\": \"1.2.0\",\n      \"description\": \"Overdue Loans\"\n    }\n  }, {\n    \"v1_1_9\" : {\n      \"version\": \"1.1.9\",\n      \"description\": \"Loan Lengths and Overdue Statistics\"\n    }\n  }, {\n    \"v1_1_4\" : {\n      \"version\": \"1.1.4\",\n      \"description\": \"Statistics\"\n    }\n  }, {\n    \"v1_1_0\" : {\n      \"version\": \"1.1.0\",\n      \"description\": \"Loans and Returns\"\n    }\n  }, {\n    \"v1_0_0\" : {\n      \"version\": \"1.0.0\",\n      \"description\": \"Initial Release Version\"\n    }\n  }\n];"}]}
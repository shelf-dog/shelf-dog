{"files":[{"id":"f17889a0-8c8b-4c5d-8379-58fc3cf5209b","name":"Entry","type":"server_js","source":"/**\n * Creates a custom menu in Google Sheets when the spreadsheet opens.\n */\nfunction onInstall(e) {\n  onOpen(e);\n};\n\nfunction onOpen() {\n  var ui \u003d SpreadsheetApp.getUi();\n  \n  ui.createMenu(\"Tasks\")\n      .addItem(\"Authorise\", \"authoriseServer\")\n      .addToUi();\n};\n\nfunction authoriseServer() {\n  ScriptApp.getOAuthToken();\n};"},{"id":"58fe416e-13bb-4acc-b485-f829a25dea2b","name":"appsscript","type":"json","source":"{\n  \"timeZone\": \"Europe/London\",\n  \"dependencies\": {\n    \"enabledAdvancedServices\": [{\n      \"userSymbol\": \"Drive\",\n      \"serviceId\": \"drive\",\n      \"version\": \"v2\"\n    }],\n    \"libraries\": [{\n      \"userSymbol\": \"WEBAPI\",\n      \"libraryId\": \"1IxhmaGfGcOnW2rXMYW4ExFxrk9NzHpHwV_0n-h0R4aZdIcuApBwvzWsk\",\n      \"version\": \"12\"\n    }, {\n      \"userSymbol\": \"SAAD\",\n      \"libraryId\": \"1D-FTHDV4Xjk6YIlTuV7dRiNThUZm6s5oeBMqvK-6q8keGsrKjEpzoIjL\",\n      \"version\": \"8\"\n    }, {\n      \"userSymbol\": \"SQLLITE\",\n      \"libraryId\": \"1znmL6oi7nIMqh09u5_hEnAHbWlEAUXHA-WS0zUWVDq2QXxxV66GkdcSz\",\n      \"version\": \"1\"\n    }, {\n      \"userSymbol\": \"CONFIG\",\n      \"libraryId\": \"1pF0iA0f5Kl_QDPEhG6hXFKSfeQ9uYrzphh1eZegTUyqbMhohOZl8AEzQ\",\n      \"version\": \"3\"\n    }]\n  },\n  \"webapp\": {\n    \"access\": \"ANYONE_ANONYMOUS\",\n    \"executeAs\": \"USER_DEPLOYING\"\n  },\n  \"exceptionLogging\": \"STACKDRIVER\",\n  \"runtimeVersion\": \"V8\"\n}"},{"id":"a3e0a89b-86fc-4043-83a3-aba6935d58c5","name":"Server","type":"server_js","source":"// -- SERVER FUNCTIONS -- //\nfunction doGet(e){\n  return WEBAPI.handleResponse(e, API, PUBLIC_KEY);\n}\n\nfunction doPost(e){\n  return WEBAPI.handleResponse(e, API, PUBLIC_KEY);\n}\n// -- SERVER FUNCTIONS -- //"},{"id":"ec3d06eb-043b-469d-a77b-791947b775c1","name":"API","type":"server_js","source":"var API \u003d {\n  \n  claims : (user, claims) \u003d\u003e {\n        var _managers \u003d config.get_managers();\n        if (_managers \u0026\u0026 _managers.length \u003e 0 \u0026\u0026 _managers.indexOf(user) \u003e\u003d 0) claims.manage \u003d true;\n        if (user \u003d\u003d\u003d Session.getActiveUser().getEmail()) claims.owner \u003d true;\n        return claims;\n      },\n      \n  meta : (params, user, claims) \u003d\u003e {\n  \n    return {\n      description: config.get_description(),\n      type: \"BOOKS\",\n      version: 1,\n      capabilities: {\n        loan: config.get_capabilities_loan(),\n        loan_field: config.get_capabilities_loan_field(),\n      },\n      contents: {\n        books: {\n          audio: config.get_contents_books_audio(),\n          electronic: config.get_contents_books_electronic(),\n          physical: config.get_contents_books_physical(),\n        }\n      },\n      recent: config.get_recent_items(),\n      actions: {\n        meta: {\n          description : \"Provides information about this API, and it\u0027s capabilities.\"\n        },\n        db: {\n          description : \"Returns the DB Catalog File for the Library.\"\n        },\n        hash: {\n          description : \"\"\n        },\n        settings: {\n          description : \"\",\n          level : \"ADMIN\"\n        },\n        cover: {\n          description : \"\"\n        },\n        available: {\n          description : \"\"\n        },\n        loans: {\n          description : \"\",\n          level : \"MANAGER\"\n        },\n        statistics: {\n          description : \"\",\n          level : \"MANAGER\"\n        },\n        log_loaned: {\n          description : \"\",\n          level : \"MANAGER\"\n        },\n        log_returned: {\n          description : \"\",\n          level : \"MANAGER\"\n        },\n      },\n      user: user,\n      claims: API.claims(user, claims)\n    }\n  },\n  \n  hash : () \u003d\u003e {\n    var _db \u003d config.get_database();\n    return _db ? Drive.Files.get(_db, {\n        supportsAllDrives: true,\n        supportsTeamDrives: true\n      }).md5Checksum : \"\";\n  },\n  \n  db : () \u003d\u003e {\n    var _db \u003d config.get_database();\n    return _db ? {\n      hash : Drive.Files.get(_db, {\n        supportsAllDrives: true,\n        supportsTeamDrives: true\n      }).md5Checksum,\n      data : DriveApp.getFileById(_db).getBlob().getBytes()\n    } : \"\";\n  },\n  \n  settings : (params, user, claims) \u003d\u003e {\n    if (!claims || !claims.admin) return;\n    if (Object.keys(params).length \u003e 0) config.set(params);\n    return config.get();\n  },\n  \n  cover : (params) \u003d\u003e {\n    if (!params || !params.path) return;\n    var _path \u003d params.path.split(\"/\");\n        _folder \u003d config.get_folder();\n        \n    if (!_folder) return;\n    _folder \u003d DriveApp.getFolderById(_folder);\n    _path.forEach((path) \u003d\u003e {\n      if (_folder) {\n        var __folder \u003d _folder.getFoldersByName(path);\n        _folder \u003d __folder.hasNext() ? __folder.next() : null;\n      }\n    });\n    \n    if (!_folder) return;\n    var _cover \u003d _folder.getFilesByName(\"cover.jpg\");\n    \n    if (!_cover.hasNext()) return;\n    _cover \u003d _cover.next();\n    \n    return params.link ? Drive.Files.get(_cover.getId(), {\n        supportsAllDrives: true,\n        supportsTeamDrives: true\n      }).thumbnailLink || _cover.getBlob().getBytes() : _cover.getBlob().getBytes();\n  },\n  \n  available : (params) \u003d\u003e {\n    if (!params || !params.copies) return;\n    var _db \u003d SAAD.DB().sheet(\"Current Loans\", SpreadsheetApp.getActiveSpreadsheet(), {Range : \"A:F\", Header : 1}),\n        _data \u003d _db.get().query();\n    \n    return params.copies.split(\",\").map((copy) \u003d\u003e {\n      var _loans \u003d _data.filter((loan) \u003d\u003e {\n        return loan.COPY \u003d\u003d copy \u0026\u0026 (loan.RETURNED \u003d\u003d null || loan.RETURNED \u003d\u003d \"\");\n      });\n      return {\n        copy: copy,\n        available: _loans.length \u003d\u003d\u003d 0 ? true : false\n      }\n    });\n  },\n  \n  loans : (params, user, claims) \u003d\u003e {\n    var _authorised \u003d claims \u0026\u0026 (claims \u003d API.claims(user, claims)).manage;\n    _authorised \u003d _authorised ? _authorised : (params \u0026\u0026 params.user \u0026\u0026 params.user.toLowerCase() \u003d\u003d user.toLowerCase());\n    if (!_authorised) return;\n    \n    var _db \u003d SAAD.DB().sheet(\"Current Loans\", SpreadsheetApp.getActiveSpreadsheet(), {Range : \"A:G\", Header : 1}),\n        _data \u003d _db.get().query();\n    return _data\n      .filter((loan) \u003d\u003e params.user ? \n        loan.USER \u0026\u0026 loan.USER.toLowerCase() \u003d\u003d params.user.toLowerCase() : \n          params.copy ? loan.COPY \u003d\u003d params.copy :\n            (loan.RETURNED \u003d\u003d null || loan.RETURNED \u003d\u003d \"\"))\n      .map((loan) \u003d\u003e {\n        var _return \u003d {\n          id: loan.ID,\n          date: loan.DATE,\n          isbn: loan.ISBN,\n          copy: loan.COPY,\n          user: loan.USER\n        };\n        if (claims \u0026\u0026 claims.manage) {\n          _return.returned \u003d loan.RETURNED;\n          _return.last \u003d loan.AUTH_USER;\n        } else {\n          _return.returned \u003d !!loan.RETURNED;\n        }\n        return _return;\n      });\n  },\n  \n  statistics : (params, user, claims) \u003d\u003e {\n    if (!claims || !(claims \u003d API.claims(user, claims)).manage) return;\n    var _db \u003d SAAD.DB().sheet(\"Current Loans\", SpreadsheetApp.getActiveSpreadsheet(), {Range : \"A:G\", Header : 1}),\n        _data \u003d _db.get().query(),\n        _week \u003d (value) \u003d\u003e {\n          var d \u003d new Date(Date.UTC(value.getFullYear(), value.getMonth(), value.getDate()));\n          var dayNum \u003d d.getUTCDay() || 7;\n          d.setUTCDate(d.getUTCDate() + 4 - dayNum);\n          var yearStart \u003d new Date(Date.UTC(d.getUTCFullYear(),0,1));\n          return Math.ceil((((d - yearStart) / 86400000) + 1)/7)\n        };\n    var _return \u003d _data.reduce((memo, loan) \u003d\u003e {\n      memo.loaned +\u003d 1;\n      loan.RETURNED ? memo.returned +\u003d 1 : memo.outstanding +\u003d 1;\n      var _loaned \u003d loan.DATE ? loan.DATE instanceof Date ? loan.DATE : new Date(loan.DATE) : false,\n          _returned \u003d loan.RETURNED ? loan.RETURNED instanceof Date ? loan.RETURNED : Date.parse(loan.RETURNED) : false;\n      if (_loaned) {\n        var _key \u003d Utilities.formatString(\"%s-%s\", _loaned.getFullYear(), _week(_loaned));\n        memo.weeks[_key] \u003d memo.weeks[_key] ? memo.weeks[_key] +\u003d 1 : 1; \n      }\n      if (_loaned \u0026\u0026 _returned \u0026\u0026 _returned \u003e _loaned) memo.durations.push(_returned - _loaned);\n      return memo;\n    }, {\n      loaned : 0,\n      returned : 0,\n      outstanding : 0,\n      durations: [],\n      weeks : {}\n    });\n    _return.durations \u003d _return.durations.length ? Math.round(_return.durations.reduce((a, b) \u003d\u003e (a + b)) / _return.durations.length / 100 / 60 / 60) / 10 : 0;\n    return _return;\n  },\n  \n  log_loaned : (params, user, claims) \u003d\u003e {\n    if (!claims || !(claims \u003d API.claims(user, claims)).manage || !config.get_capabilities_loan()) return;\n    if (!params || !params.user || !params.id) return;\n    \n    SpreadsheetApp.getActiveSpreadsheet().getSheetByName(\"Current Loans\").appendRow([\n      new Date().toISOString(),\n      Utilities.formatString(\"\u0027%s\", params.id),\n      params.isbn ? Utilities.formatString(\"\u0027%s\", params.isbn) : \"\",\n      Utilities.formatString(\"\u0027%s\", params.copy || params.id),\n      params.user,\n      \"\",\n      user\n    ]);\n    \n    return API.available({\n      copies: params.copy || params.id\n    });\n  },\n  \n  log_returned : (params, user, claims) \u003d\u003e {\n    if (!claims || !(claims \u003d API.claims(user, claims)).manage || !config.get_capabilities_loan()) return;\n    if (!params || !params.copy) return;\n    \n    var _spreadsheet \u003d SpreadsheetApp.getActiveSpreadsheet(),\n        _db \u003d SAAD.DB().sheet(\"Current Loans\", _spreadsheet, {Range : \"A:G\", Header : 1}),\n        _data \u003d _db.get().query(),\n        _loans \u003d _data.filter((loan) \u003d\u003e (loan.RETURNED \u003d\u003d null || loan.RETURNED \u003d\u003d \"\") \u0026\u0026 loan.COPY \u003d\u003d params.copy);\n    \n    if (_loans.length \u003d\u003d 1) {\n      _spreadsheet.getSheetByName(\"Current Loans\").getRange(_loans[0].$SaaD.row + 1, 6, 1, 2).setValues([[new Date().toISOString(), user]]);\n      return API.available({\n        copies: params.copy\n      });\n    }\n  }\n  \n}"},{"id":"5654b6d9-1089-4ced-9865-20ed363671d8","name":"Config","type":"server_js","source":"var config \u003d CONFIG.configure(PropertiesService.getScriptProperties(), {\n  description: {\n    name: \"DESCRIPTION\",\n    initial: \"Library\"\n  },\n  capabilities_loan: {\n    name: \"CAPABILITIES_LOAN\",\n    initial: false\n  },\n  capabilities_loan_field: {\n    name: \"CAPABILITIES_LOAN_FIELD\",\n    initial: \"\"\n  },\n  contents_books_audio: {\n    name: \"CONTENTS_BOOKS_AUDIO\",\n    initial: false\n  },\n  contents_books_electronic: {\n    name: \"CONTENTS_BOOKS_ELECTRONIC\",\n    initial: false\n  },\n  contents_books_physical: {\n    name: \"CONTENTS_BOOKS_PHYSICAL\",\n    initial: false\n  },\n  recent_items: {\n    name: \"RECENT_ITEMS\",\n    initial: 5\n  },\n  folder: {\n    name: \"FOLDER\",\n    initial: \"\"\n  },\n  database: {\n    name: \"DATABASE\",\n    initial: \"\"\n  },\n  managers: {\n    name: \"MANAGERS\",\n    initial: []\n  }\n});"},{"id":"c3f0553b-3394-4ccf-87bb-e421a2e623c9","name":"Crypto","type":"server_js","source":"var PUBLIC_KEY \u003d \"{{{KEY}}}\";"},{"id":"27e400f0-0600-415d-8323-219a045afda0","name":"Versions","type":"server_js","source":"// -- All String Keys have to be quoted for JSON Parsing -- //\nvar VERSIONS \u003d [\n  {\n    \"v1_1_0\" : {\n      \"version\": \"1.1.0\",\n      \"description\": \"Loans and Returns\"\n    }\n  }, {\n    \"v1_0_0\" : {\n      \"version\": \"1.0.0\",\n      \"description\": \"Initial Release Version\"\n    }\n  }\n];"}]}